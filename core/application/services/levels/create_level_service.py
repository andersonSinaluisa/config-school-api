# -*- coding: utf-8 -*-
from core.domain.entities.level import Level
from core.domain.repositories.level_repository import LevelRepository
import logging
from rest_framework.exceptions import ValidationError, NotFound

class CreateLevelService:
    def __init__(self, level_repository:LevelRepository):
        self.level_repository = level_repository

    def execute(self, name, description, order):
        """Create a new level.
        Args:
            level_data (dict): A dictionary containing level data.
        Returns:
            Level: The created level object.
        """
        try:
            
            if self.level_repository.exist_by_name(name):
                raise RuntimeError("Level with this name already exists.")
            new_level = Level(
                id=None,  # ID is auto-generated by the database
                name=name,
                description=description,
                order=order
            )
            # Create the level using the repository
            return self.level_repository.create(new_level)
        except Exception as e:
            logging.error(f"Error creating level: {e}")
            if isinstance(e, ValidationError):
                raise ValidationError("Invalid level data")
            elif isinstance(e, NotFound):
                raise NotFound("Level not found")
            else:
                raise Exception("An unexpected error occurred") from e