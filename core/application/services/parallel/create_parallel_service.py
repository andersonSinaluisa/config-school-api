

from core.domain.entities.parallel import Parallel
from core.domain.repositories.course_repository import CourseRepository
from core.domain.repositories.parallel_repository import ParallelRepository
from core.domain.repositories.section_repository import SectionRepository
from rest_framework.exceptions import ValidationError

class CreateParallelService:
    def __init__(self, parallel_repository: ParallelRepository,
                 course_repository:CourseRepository,
                 section_repository:SectionRepository,
    ):
        self.parallel_service = parallel_repository
        self.course_repository = course_repository
        self.section_repository = section_repository

    def execute(self, name, course_id, capacity, section_id, school_year_id):
        """
        Execute the creation of a parallel record.
        :param name: The name of the parallel record.
        :param course_id: The ID of the course associated with the parallel record.
        :param capacity: The capacity of the parallel record.
        :param section_id: The ID of the section associated with the parallel record.
        :param school_year_id: The ID of the school year associated with the parallel record.
        :return: The created parallel record.
        """
        # Check if a parallel with the same course ID and subject ID already exists
        if self.parallel_service.exist_by_course_id_and_section_id(course_id, section_id):
            raise ValidationError("A parallel with the same course ID and subject ID already exists.",
                                  code="duplicate_parallel")
            
        # Check if the course ID is valid
        if not self.course_repository.exist_by_id(course_id):
            raise ValidationError("The course ID does not exist.", code="invalid_course_id")
        
        if not self.section_repository.exist_by_id(section_id):
            raise ValidationError("The section ID does not exist.", code="invalid_section_id")

        # Create the new parallel record
        new_parallel = Parallel(
            id=None,  # Assuming the ID is auto-generated by the database
            name=name,
            course_id=course_id,
            capacity=capacity,
            section_id=section_id,
            school_year_id=school_year_id
        )
        parallel = self.parallel_service.create(new_parallel)
        return parallel