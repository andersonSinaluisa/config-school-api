

from core.domain.entities.parallel import Parallel
from core.domain.repositories.course_repository import CourseRepository
from core.domain.repositories.parallel_repository import ParallelRepository
from core.domain.repositories.school_year_repository import SchoolYearRepository
from core.domain.repositories.section_repository import SectionRepository
from rest_framework.exceptions import ValidationError, NotFound
from django.core.exceptions import ObjectDoesNotExist
class UpdateParallelService:
    def __init__(self, parallel_repository:ParallelRepository,
                 course_repository:CourseRepository,
                 section_repository:SectionRepository,
                 school_year_repository: SchoolYearRepository

                 ):
        self.parallel_repository = parallel_repository
        self.course_repository = course_repository
        self.section_repository = section_repository
        self.school_year_repository = school_year_repository


    def execute(self,id, name, course_id, capacity, section_id, school_year_id):
        
        """
        Execute the update of a parallel record.
        :param id: The ID of the parallel record to be updated.
        :param name: The new name of the parallel record.
        :param course_id: The new ID of the course associated with the parallel record.
        :param capacity: The new capacity of the parallel record.
        :param section_id: The new ID of the section associated with the parallel record.
        :param school_year_id: The new ID of the school year associated with the parallel record.
        :return: The updated parallel record.
        """
        # Check if a parallel with the same course ID and subject ID already exists
        if self.parallel_repository.exist_by_course_id_and_section_id_except_id(course_id, section_id, id):
            raise ValidationError("A parallel with the same course ID and subject ID already exists.",
                                  code="duplicate_parallel")
            
        # Check if the course ID is valid
        if not self.course_repository.exist_by_id(course_id):
            raise ValidationError("The course ID does not exist.", code="invalid_course_id")
        
        if not self.section_repository.exist_by_id(section_id):
            raise ValidationError("The section ID does not exist.", code="invalid_section_id")
        if not self.school_year_repository.exist_by_id(school_year_id):
            raise  ValidationError("The School Year Id does not exist", code="invalid_school_year_id")
        try:
            parallel = Parallel(
                id=id,  # Assuming the ID is auto-generated by the database
                name=name,
                course_id=course_id,
                capacity=capacity,
                section_id=section_id,
                school_year_id=school_year_id
            )
            updated_parallel = self.parallel_repository.update(parallel)
        
            return updated_parallel
        except ObjectDoesNotExist:
            raise NotFound("The parallel record does not exist.", code="parallel_not_found")